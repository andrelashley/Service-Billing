
@model BillEntryViewModel
@{

}

<div id='app'>
    <div>
        <h1>Enter a new bill</h1>
        <br>
        @using (Html.BeginForm("Create", "Billing", FormMethod.Post))
        {
            
        <div class="input-component">
                <label for="site-or-person">Affected Site or Person:</label>
                <input id="site-or-person" v-model="model.affectedSiteOrPerson" />
            </div>
            @if(Model.IsOneTime)
            {
                <div class="input-component">
                    <label for="request-date">Request Date:</label>
                    <input type="date" id="request-date" v-model="model.RequestDate" />
                </div>
            }
            <div class="input-component">
                <label for="billing-cycle">Billing Cycle:</label>
                <input type="date" id="billing-cycle" v-model="model.BillingCycle" />
            </div>
                    <!-- we'll probably replace this with a for-loop of accounts.
                        Right now I'm not sure how this has been handled-->
            <div class="input-component">
                <label for="account">Account:</label>
                <select name="account" id="account" multiple v-model="model.Account">
                    <option value="1">Volvo</option>
                    <option value="2">Saab</option>
                    <option value="3">Opel</option>
                    <option value="4">Audi</option>
                </select>
            </div>
            <!-- Here I assume that Ticket Number is not user-definable , so not included.-->
            <!--As I mentioned in the model, we should probably have an actual
                contact model, not just a string. Maybe a modal popup or something will go here.-->
            <div class="input-component">
                <label for="contact">Requester:</label>
                <input id="contact" v-model="model.requesterName"/>
            </div>
            <!-- Similar to Account, we will probably get these options from a query, and handle this with more sophistication-->
            <div class="input-component">
                <label for="service-type">Account:</label>
                <select name="service-type" id="service" multiple v-model="model.ServiceCategory">
                    <option value="1">CMS Lite license</option>
                    <option value="2">WordPress – Hosting 1st Site</option>
                    <option value="3">Analytics – Ministry CMS Lite</option>
                    <option value="4">Orbeon Forms – Ministry fee</option>
                </select>
            </div>
            <div class="input-component">
                <label for="quantity">Quantity:</label>
                <input type="number" id="quantity" v-model="model.Quantity"/>
            </div>
            <div class="input-component">
                <label for="amount">Amount:</label>
                <input type="number" id="amount" v-model="model.Amount" />
            </div>
            @if (! Model.IsOneTime)
            {
                <div class="input-component">
                    <label for="start-date">Service Start Date:</label>
                    <input type="date" id="start-date" v-model="model.ServiceStartDate" />
                </div>
                <div class="input-component">
                    <label for="end-date">Service End Date:</label>
                    <input type="date" id="end-date" v-model="model.ServiceEndDate" />
                </div>
            }
            <input type="submit" value="BillingControlller/Create" />
        }
    </div>
</div>

<script>
    var modelJson = @Html.Raw(Json.Serialize(@Model));
    var vueApp = new Vue({
        el: '#app',
        data: {
            message: 'Hello Vue!',
            model: modelJson
        }
    })
</script>