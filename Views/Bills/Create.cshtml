@model Service_Billing.Models.Bill

@{
    ViewData["Title"] = "Add Service Charge";
    Layout = "_Layout";
}
@{
    IEnumerable<ServiceCategory> categories = ViewData["Categories"] as IEnumerable<ServiceCategory>;
    string? currentUserName = ViewData["CurrentUser"] != null ? ViewData["CurrentUser"].ToString() : "";
}

<h1>Add Service Charge</h1>

<hr />
<div class="row row-cols-1 row-cols-md-3 g-4">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="@Model.ClientAccount.Name">Client: </label>
                <input asp-for="@Model.ClientAccount.Name" id="clientInput" class="form-control" title="Begin entering a client name, and a list of matching clients will appear." />
                <span asp-validation-for="@Model.ClientAccount.Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="hidden" asp-for="@Model.ClientAccountId" id="clientIdInput" class="form-control" />
                <span asp-validation-for="@Model.ClientAccountId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Title" class="control-label">Program</label>
                <input asp-for="Title" class="form-control" data-val="true" data-val-required="Add the name of the digital asset / web property / IDIR. Don't use acronyms." />
                <span asp-validation-for="Title" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="IdirOrUrl" class="control-label"></label>
                <input asp-for="IdirOrUrl" class="form-control" />
                <span asp-validation-for="IdirOrUrl" class="text-danger"></span>
            </div>
            @* <input asp-for="@Model.ServiceCategoryId" id="categoryIdInput" class="form-control" readonly="true" /> *@
            <input type="hidden" asp-for="@Model.ServiceCategoryId" id="categoryIdInput" class="form-control" data-val="true" data-val-required="A Service Category must be selected" />
            @await Component.InvokeAsync("ServiceCategoryInput", new { categories =  categories })
   
            
            <div class="form-group">
                <label asp-for="Amount" class="control-label"></label>
                <input asp-for="Amount" class="form-control" id="amount" />
                <span asp-validation-for="Amount" class="text-danger"></span>
                <div class="input-info">
                    The amount is calculated based on service and quantity, and typically should not be changed. 
                </div>
            </div>
            <div class="form-group">
                <label>UOM</label>
                <input id="uom" class="form-control" readonly="true" />
            </div>
            <div class="form-group">
                <label asp-for="FiscalPeriod" class="control-label"></label>
                <input asp-for="FiscalPeriod" class="form-control" data-val="true" data-val-required="Please provide a Fiscal Period" />
                <span asp-validation-for="FiscalPeriod" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Quantity" class="control-label"></label>
                <input asp-for="Quantity" class="form-control" id="quantity" data-val="true" data-val-required="A quantity must be provided" />
                <span asp-validation-for="Quantity" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="TicketNumberAndRequester" class="control-label"></label>
                <input asp-for="TicketNumberAndRequester" class="form-control" />
                <span asp-validation-for="TicketNumberAndRequester" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="StartDate" class="control-label"></label>
                <input asp-for="StartDate" class="form-control" />
                <span asp-validation-for="StartDate" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="EndDate" class="control-label"></label>
                <input asp-for="EndDate" class="form-control" />
                <span asp-validation-for="EndDate" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="BillingCycle" class="control-label"></label>
                <input asp-for="BillingCycle" class="form-control" />
                <span asp-validation-for="BillingCycle" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="CreatedBy" class="control-label"></label>
                <input asp-for="CreatedBy" value="@currentUserName" class="form-control" />
                <span asp-validation-for="CreatedBy" class="text-danger"></span>
            </div>
             <div class="form-group">
                <label asp-for="@Model.Notes" class="control-label"></label>
                <textarea asp-for="@Model.Notes" class="form-control" value="@Model.Notes" > </textArea>
                <span asp-validation-for="@Model.Notes" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts{
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        $(document).ready(function () {
            var userSetQuantity = false;
            // nav link highlighting
            $('li').removeClass("active-nav-link");
            $('#order-service-link').addClass("active-nav-link");
            calculateAmount = () => {
                if(!$("#quantity")){
                    $("#quantity").val(1);
                }
                var url = "../../Bills/GetBillAmount?serviceId=" + $("#categorySelect").val() + "&quantity=" + $("#quantity").val();
                var xhr = new XMLHttpRequest();

                xhr.onreadystatechange = function () {
                    if (this.readyState == 4 && this.status == 200) {
                        var response = JSON.parse(xhr.response);
                        $("#amount").val(response['amount']);
                        $("#uom").val(response['uom']);
                        if ($('#uom').val() == 'Month' && userSetQuantity === false) {
                            console.log(userSetQuantity);
                            $('#quantity').val(3);
                            $("#amount").val($('#amount').val() * 3);
                        } 
                    }
                };
                xhr.open('get', url);
                xhr.send();
            }
            $("#categorySelect").on("change", (e) => {
                if ($("#categorySelect").val() < 21) { //id's greater than 21 are older categories, with slightly different names and prices
                    $("#categoryWarning").hide();
                }

                var id = $('#categorySelect').val();
                $("#categoryIdInput").val(id);
                
                calculateAmount();
            });
            $("#quantity").on("change", (e) => {
                userSetQuantity = true;
                calculateAmount();
            });

            var clientsMatchingSearch = [];
            createClientSelect = () => {
                var url = "../../Bills/GetClients";
                var xhr = new XMLHttpRequest();
                xhr.onreadystatechange = function () {
                    if (this.readyState == 4 && this.status == 200) {
                        clientsMatchingSearch = [];
                        var data = JSON.parse(xhr.response);

                        for (const client in data) {
                            clientsMatchingSearch.push({ label: data[client].name, "clientId": data[client].id });
                        }

                        $("#clientInput").autocomplete({
                            source: clientsMatchingSearch
                        });

                    }
                };
                xhr.open('get', url);
                xhr.send();

                $("#clientInput").autocomplete({
                    source: clientsMatchingSearch,
                    delay: 500,
                    select: function (event, ui) {
                        $("#clientIdInput").val(ui.item.clientId);
                        $("#clientInput").text(ui.item.label);
                    },
                    minLength: 0
                });
            }
            createClientSelect();
        });
    </script>
}