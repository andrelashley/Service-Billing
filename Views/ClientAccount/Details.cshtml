@model Service_Billing.ViewModels.ClientDetailsViewModel

@{
    ViewData["Title"] = "Details";
    ClientTeam? clientTeam = ViewData["clientTeam"] as ClientTeam;
    var parms = new Dictionary<string, string>
            {
                { "clientNumber", Model.Account.ClientNumber.ToString() }
            };
}
@{
    var user = User as ClaimsPrincipal;
    var isMinistryClient = user?.IsMinistryClient() ?? false;
}
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@inject IAuthorizationService AuthorizationService

<h1>Client Account Information</h1>

<div>
    <h4>@Model.Account.Id-@Model.Account.Name</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Account.Name)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Account.Name)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Account.ClientNumber)
        </dt>
        <dd class="col-sm-10">
            <a asp-controller="Bills"
               asp-action="Index"
               asp-all-route-data="parms"
               title="See charges associated with this account">@Model.Account.ClientNumber</a>
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Account.ResponsibilityCentre)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Account.ResponsibilityCentre)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Account.ServiceLine)
        </dt>
        <dd class="col-sm-10">
            @String.Format("{0:00000}", Model.Account.ServiceLine)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Account.STOB)
        </dt>
        <dd class="col-sm-10">
            @String.Format("{0:0000}", Model.Account.STOB)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Account.Project)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Account.Project)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Account.ExpenseAuthorityName)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Account.ExpenseAuthorityName)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Account.ServicesEnabled)
        </dt>
        <dd class="col-sm-10">
            @if (String.IsNullOrEmpty(Model.Account.ServicesEnabled))
            {
                <br />
            }
            else
            {
                @Html.DisplayFor(model => model.Account.ServicesEnabled)
            }
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Account.IsApprovedByEA)
        </dt
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Account.IsApprovedByEA)
        </dd>
        <dd class="col-sm-10" name="clientTeam">
            <partial name="_ClientTeam" model="@Model.Team" />
        </dd>
        @* <dd>
        <partial name="_ClientCharges" model="@Model.Charges" />
        </dd> *@
    </dl>
    @if ((await AuthorizationService.AuthorizeAsync(User, "RequireFinancialOfficerRole")).Succeeded && Model.Account.IsActive && !isMinistryClient)
    {
        <input type="submit" value="Deactivate This Client" class="btn btn-default" onclick="confirmDeactivateClient(@Model.Account.Id)" />
    }
    else if ((await AuthorizationService.AuthorizeAsync(User, "RequireFinancialOfficerRole")).Succeeded)
    {
        <input type="submit" value="Reactivate" class="btn btn-default" onclick="confirmReactivateClient(@Model.Account.Id)" />
    }
    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">Title</th>
                <th scope="col">Service Category</th>
                <th scope="col">Amount</th>
                @*   <th scope="col">UOM</th>
                <th scope="col">Quantity</th> *@
                <th scope="col">Start Date</th>
                <th scope="col">End Date</th>
                <th scope="col">Details</th>
            </tr>
        </thead>
        <tbody>
            @foreach (Bill charge in Model.Charges)
            {
                @if (charge.IsActive)
                {


                    <tr>
                        <td>@charge.Title</td>
                        <td>@Model.CategoryNames[charge.Id]</td>
                        <td>@charge.Amount</td>
                        <td>@charge.StartDate</td>
                        @if (charge.EndDate == null)
                        {
                            <td><a asp-action="Edit" asp-controller="Bills" asp-route-id="@charge.Id">Provide end date?</a></td>
                        }
                        else
                        {
                            <td>@charge.EndDate</td>
                        }
                        <td><a asp-action="Details" asp-controller="Bills" asp-route-id="@charge.Id">see this charge</a></td>
                        @if ((await AuthorizationService.AuthorizeAsync(User, "RequireFinancialOfficerRole")).Succeeded && !isMinistryClient)
                        {
                            <td><input type="submit" value="Deactivate" class="btn btn-default" onclick="confirmInactive(@charge.Id)" /></td>
                        }
                    </tr>
                }
            }
        </tbody>
    </table>
    @if (Model.InactiveCharges.Any())
    {
        <h4>Inactive Charges</h4>
        <p>These are old or cancelled charges, and are not factored into quarterly reporting.</p>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th scope="col">Title</th>
                    <th scope="col">Service Category</th>
                    <th scope="col">Amount</th>
                    <th scope="col">Start Date</th>
                    <th scope="col">End Date</th>
                    <th scope="col">Details</th>
                </tr>
            </thead>
            <tbody>
                @foreach (Bill charge in Model.InactiveCharges)
                {

                    <tr>
                        <td>@charge.Title</td>
                        <td>@Model.CategoryNames[charge.Id]</td>
                        <td>@charge.Amount</td>
                        <td>@charge.StartDate</td>
                        @if (charge.EndDate == null)
                        {
                            <td><a asp-action="Edit" asp-controller="Bills" asp-route-id="@charge.Id">Provide end date?</a></td>
                        }
                        else
                        {
                            <td>@charge.EndDate</td>
                        }
                        <td><a asp-action="Details" asp-controller="Bills" asp-route-id="@charge.Id">see this charge</a></td>
                        @if ((await AuthorizationService.AuthorizeAsync(User, "RequireFinancialOfficerRole")).Succeeded && Model.Account.IsActive)
                        {
                            <td><input type="submit" value="Reactivate" class="btn btn-default" onclick="confirmReactivateCharge(@charge.Id)" /></td>
                        }
                    </tr>

                }
            </tbody>
        </table>
    }
</div>
@if ((await AuthorizationService.AuthorizeAsync(User, "RequireFinancialOfficerRole")).Succeeded)
{
    <div>
        <a asp-action="Edit" asp-route-id="@Model?.Account.Id">Edit</a> |
        @if (!isMinistryClient)
        {
          //  <a asp-action="Create?=accountId=@Model?.Account.Id.ToString()/" asp-controller="Bills">Order a Service</a>
            <a href="/Bills/Create?accountId=@Model?.Account.Id">Order a Service</a>
            <text> | </text>
        }
        <a asp-action="Index">Back to List</a>
    </div>

    <div id="dialog" title="Set this charge to Inactive?">
        <p>Inactive charges are not factored into quarterly reports, and deactivated fixed services are not carried to future billing cycles.</p>
    </div>
    <div id="reactivate-charge-dialog" title="Reactivate this charge?">
        <p>This charge will be made active. It will be counted in quarterly reporting, and included in future billing cycles if appropriate.</p>
    </div>

    <div id="deactivate-client-dialog" title="Whoa, Really?">
        <p>This client will be set to inactive, and as well all it's associated charges.</p>
    </div>
    <div id="reactivate-client-dialog" title="Reactivate Client?">
        <p>This client will be set to active, and can be billed for new charges.</p>
        <p>Any charges associated with this client that were set to inactive can be reactivated from the list of inactive charges below.</p>
    </div>
}
@section Scripts
{
    <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.js"></script>

    <script>
        $(function () {
            $("#dialog").dialog({
                resizable: false,
                height: "auto",
                width: 400,
                autoOpen: false,
                buttons: {
                    "Set Inactive": function () {
                        $(this).dialog("close");
                        setIsActiveForCharge($(this).dialog("option", "id"), false);
                    },
                    Cancel: function () {
                        $(this).dialog("close");
                    }
                }
            });
        });
        const confirmInactive = ((val) => {
            $("#dialog").dialog("option", "id", val);
            $("#dialog").dialog("open");
        });

        const setIsActiveForCharge = ((id, active) => {
            var url = "../../Bills/SetIsActiveForCharge?id=" + id + "&active=" + active;
            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200) {

                    window.location.reload();
                }
            };
            xhr.open('post', url);
            xhr.send();
        });

        $(function () {
            $("#reactivate-charge-dialog").dialog({
                resizable: false,
                height: "auto",
                width: 400,
                autoOpen: false,
                buttons: {
                    "Reactivate": function () {
                        $(this).dialog("close");
                        setIsActiveForCharge($(this).dialog("option", "id"), true);
                    },
                    Cancel: function () {
                        $(this).dialog("close");
                    }
                }
            });
        });
        const confirmReactivateCharge = ((val) => {
            $("#reactivate-charge-dialog").dialog("option", "id", val);
            $("#reactivate-charge-dialog").dialog("open");
        });
        $(function () {
            $("#reactivate-client-dialog").dialog({
                resizable: false,
                height: "auto",
                width: 400,
                autoOpen: false,
                buttons: {
                    "Reactivate": function () {
                        $(this).dialog("close");
                        setIsActiveForClient($(this).dialog("option", "id"), true);
                    },
                    Cancel: function () {
                        $(this).dialog("close");
                    }
                }
            });
        });
        $(function () {
            $("#deactivate-client-dialog").dialog({
                resizable: false,
                height: "auto",
                width: 400,
                autoOpen: false,
                buttons: {
                    "Deactivate Client": function () {
                        $(this).dialog("close");
                        setIsActiveForClient($(this).dialog("option", "id"), false);
                    },
                    Cancel: function () {
                        $(this).dialog("close");
                    }
                }
            });
        });

        const confirmReactivateClient = ((val) => {
            $("#reactivate-client-dialog").dialog("option", "id", val);
            $("#reactivate-client-dialog").dialog("open");
        });
        const confirmDeactivateClient = ((val) => {
            $("#deactivate-client-dialog").dialog("option", "id", val);
            $("#deactivate-client-dialog").dialog("open");
        });

        const setIsActiveForClient = ((id, active) => {
            var url = "../../ClientAccount/SetIsActiveForClient?id=" + id + "&active=" + active;
            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200) {

                    window.location.reload();
                }
            };
            xhr.open('post', url);
            xhr.send();
        });
    </script>
}
